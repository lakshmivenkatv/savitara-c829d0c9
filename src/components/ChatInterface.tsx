import React, { useState, useRef, useEffect, useCallback } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Send, Bot, User, Cpu, Cloud, Mic, MicOff } from 'lucide-react';
import { LanguageSelector } from './LanguageSelector';
import { EngineSelector } from './EngineSelector';
import { DocumentUpload } from './DocumentUpload';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';
import { indicNLP } from '@/utils/indicNLP';
import { documentProcessor } from '@/utils/documentProcessor';
import { useIsMobile } from '@/hooks/use-mobile';

interface Message {
  id: string;
  content: string;
  role: 'user' | 'assistant';
  timestamp: Date;
}

interface ChatInterfaceProps {
  engine?: string;
  onEngineChange?: (engine: string) => void;
  onDocumentsProcessed?: () => void;
  documentsProcessedCount?: number;
}

export const ChatInterface = ({ 
  engine: externalEngine, 
  onEngineChange, 
  onDocumentsProcessed,
  documentsProcessedCount 
}: ChatInterfaceProps = {}) => {
  const [messages, setMessages] = useState<Message[]>([]);
  const [input, setInput] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [language, setLanguage] = useState('english');
  const [engine, setEngine] = useState(externalEngine || 'azure');
  const [isInitializingIndic, setIsInitializingIndic] = useState(false);
  const [uploadedDocuments, setUploadedDocuments] = useState<File[]>([]);
  const [isListening, setIsListening] = useState(false);
  const [speechText, setSpeechText] = useState('');
  const [showSpeechPreview, setShowSpeechPreview] = useState(false);
  const scrollAreaRef = useRef<HTMLDivElement>(null);
  const recognitionRef = useRef<any>(null);
  const { toast } = useToast();
  const isMobile = useIsMobile();

  // Sync external engine state
  React.useEffect(() => {
    if (externalEngine && externalEngine !== engine) {
      setEngine(externalEngine);
    }
  }, [externalEngine, engine]);

  // Handle engine changes
  const handleEngineChange = (newEngine: string) => {
    setEngine(newEngine);
    if (onEngineChange) {
      onEngineChange(newEngine);
    }
  };

  useEffect(() => {
    if (scrollAreaRef.current) {
      scrollAreaRef.current.scrollTop = scrollAreaRef.current.scrollHeight;
    }
  }, [messages]);

  // Initialize Indic NLP when engine switches to indic
  useEffect(() => {
    if (engine === 'indic' && !isInitializingIndic) {
      setIsInitializingIndic(true);
      toast({
        title: "Loading Advanced AI Engine",
        description: "Initializing multilingual BERT model for better contextual understanding...",
      });
      
      indicNLP.initialize()
        .then(() => {
          toast({
            title: "Advanced Indic NLP Ready",
            description: "Enhanced contextual AI engine with document learning is now active",
          });
        })
        .catch((error) => {
          console.error('Failed to initialize Indic NLP:', error);
          toast({
            title: "Engine Loading Issue",
            description: "Using enhanced template system with document context as fallback",
            variant: "destructive",
          });
        })
        .finally(() => {
          setIsInitializingIndic(false);
        });
    }
  }, [engine, toast, isInitializingIndic]);

  // Handle document processing updates
  const handleDocumentsProcessed = useCallback(async () => {
    // The document processor will automatically reload from database when needed
    console.log('Documents updated, clearing local cache');
    documentProcessor.clearDocuments();
    if (onDocumentsProcessed) {
      onDocumentsProcessed();
    }
  }, [onDocumentsProcessed]);

  // Initialize speech recognition
  useEffect(() => {
    if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
      const SpeechRecognition = (window as any).SpeechRecognition || (window as any).webkitSpeechRecognition;
      recognitionRef.current = new SpeechRecognition();
      
      recognitionRef.current.continuous = false;
      recognitionRef.current.interimResults = false;
      recognitionRef.current.lang = getLanguageCode(language);

      recognitionRef.current.onstart = () => {
        setIsListening(true);
        toast({
          title: "ЁЯОд Listening",
          description: "Speak now...",
        });
      };

      recognitionRef.current.onresult = (event: any) => {
        const transcript = event.results[0][0].transcript;
        setSpeechText(transcript);
        setShowSpeechPreview(true);
        toast({
          title: "тЬЕ Speech captured",
          description: "Review and submit your question",
        });
      };

      recognitionRef.current.onerror = (event: any) => {
        console.error('Speech recognition error:', event.error);
        setIsListening(false);
        toast({
          title: "тЭМ Speech Error",
          description: "Failed to capture speech. Please try again.",
          variant: "destructive",
        });
      };

      recognitionRef.current.onend = () => {
        setIsListening(false);
      };
    }

    return () => {
      if (recognitionRef.current) {
        recognitionRef.current.stop();
      }
    };
  }, [language, toast]);

  // Get language code for speech recognition
  const getLanguageCode = (lang: string): string => {
    const langMap: Record<string, string> = {
      english: 'en-US',
      hindi: 'hi-IN',
      tamil: 'ta-IN',
      telugu: 'te-IN',
      kannada: 'kn-IN',
      malayalam: 'ml-IN',
      bengali: 'bn-IN',
      gujarati: 'gu-IN',
      marathi: 'mr-IN',
      punjabi: 'pa-IN',
    };
    return langMap[lang] || 'en-US';
  };

  // Start speech recognition
  const startListening = () => {
    if (!recognitionRef.current) {
      toast({
        title: "тЭМ Not Supported",
        description: "Speech recognition is not supported in your browser.",
        variant: "destructive",
      });
      return;
    }

    recognitionRef.current.lang = getLanguageCode(language);
    recognitionRef.current.start();
  };

  // Stop speech recognition
  const stopListening = () => {
    if (recognitionRef.current) {
      recognitionRef.current.stop();
    }
  };

  // Submit speech text
  const submitSpeechText = () => {
    setInput(speechText);
    setShowSpeechPreview(false);
    setSpeechText('');
  };

  // Cancel speech input
  const cancelSpeechInput = () => {
    setShowSpeechPreview(false);
    setSpeechText('');
  };

  // Function to normalize text for better matching across Indic scripts
  const normalizeText = (text: string): string => {
    return text
      .normalize('NFC') // Normalize Unicode to composed form
      .toLowerCase()
      .trim()
      .replace(/\s+/g, ' '); // Replace multiple spaces with single space
  };

  // Function to validate if question is related to Hindu Dharma
  const isHinduDharmaRelated = (question: string): boolean => {
    const hinduDharmaKeywords = [
      // Core concepts - English
      'dharma', 'vedic', 'veda', 'vedas', 'hindu', 'hinduism', 'sanatan', 'sanatana',
      'sampradaya', 'tradition', 'ritual', 'ceremony', 'puja', 'yajna', 'yagna',
      'mantra', 'shloka', 'sanskrit', 'yoga', 'meditation', 'dhyana',
      
      // Core concepts - Hindi (Devanagari)
      'рдзрд░реНрдо', 'рдзрд░реНрдорд╛', 'рд╡реЗрдж', 'рд╡реЗрджрд╛', 'рд╣рд┐рдВрджреВ', 'рд╕рдирд╛рддрди', 'рд╕рдВрдкреНрд░рджрд╛рдп', 'рдкрд░рдВрдкрд░рд╛', 'рд░реАрддрд┐',
      'рдкреВрдЬрд╛', 'рдпрдЬреНрдЮ', 'рдпрдЬрди', 'рдордВрддреНрд░', 'рд╢реНрд▓реЛрдХ', 'рд╕рдВрд╕реНрдХреГрдд', 'рдпреЛрдЧ', 'рдзреНрдпрд╛рди', 'рд╕рд╛рдзрдирд╛',
      
      // Core concepts - Tamil
      'родро░рпНроороорпН', 'ро╡рпЗродроорпН', 'роЗроирпНродрпБ', 'роЪройро╛родрой', 'роЪроорпНрокро┐ро░родро╛ропроорпН', 'рокро░роорпНрокро░рпИ', 'рокрпВроЬрпИ',
      'ропро╛роХроорпН', 'роороирпНродро┐ро░роорпН', 'ро╕рпНро▓рпЛроХроорпН', 'роЪрооро╕рпНроХро┐ро░рпБродроорпН', 'ропрпЛроХроорпН', 'родро┐ропро╛ройроорпН',
      
      // Core concepts - Telugu  
      'р░зр░░р▒Нр░ор░В', 'р░╡р▒Зр░жр░В', 'р░╣р░┐р░Вр░жр▒В', 'р░╕р░ир░╛р░др░и', 'р░╕р░Вр░кр▒Нр░░р░жр░╛р░пр░В', 'р░кр░░р░Вр░кр░░', 'р░кр▒Вр░Ь',
      'р░пр░Ьр▒Нр░Юр░В', 'р░ор░Вр░др▒Нр░░р░В', 'р░╢р▒Нр░▓р▒Лр░Хр░В', 'р░╕р░Вр░╕р▒Нр░Хр▒Гр░др░В', 'р░пр▒Лр░Чр░В', 'р░зр▒Нр░пр░╛р░ир░В',
      
      // Core concepts - Kannada
      'р▓зр▓░р│Нр▓о', 'р▓╡р│Зр▓ж', 'р▓╣р▓┐р▓Вр▓жр│В', 'р▓╕р▓ир▓╛р▓др▓и', 'р▓╕р▓Вр▓кр│Нр▓░р▓жр▓╛р▓п', 'р▓кр▓░р▓Вр▓кр▓░р│Ж', 'р▓кр│Вр▓Ьр│Ж',
      'р▓пр▓Ьр│Нр▓Ю', 'р▓ор▓Вр▓др│Нр▓░', 'р▓╢р│Нр▓▓р│Лр▓Х', 'р▓╕р▓Вр▓╕р│Нр▓Хр│Гр▓д', 'р▓пр│Лр▓Ч', 'р▓зр│Нр▓пр▓╛р▓и',
      
      // Core concepts - Malayalam
      'р┤зр╡╝р┤ор╡Нр┤ор┤В', 'р┤╡р╡Зр┤жр┤В', 'р┤╣р┤┐р┤ир╡Нр┤жр╡Б', 'р┤╕р┤ир┤╛р┤др┤и', 'р┤╕р┤ор╡Нр┤кр╡Нр┤░р┤жр┤╛р┤пр┤В', 'р┤кр┤╛р┤░р┤ор╡Нр┤кр┤░р╡Нр┤пр┤В', 'р┤кр╡Вр┤Ь',
      'р┤пр┤Ьр╡Нр┤Юр┤В', 'р┤ор┤ир╡Нр┤др╡Нр┤░р┤В', 'р┤╢р╡Нр┤▓р╡Лр┤Хр┤В', 'р┤╕р┤Вр┤╕р╡Нр┤Хр╡Гр┤др┤В', 'р┤пр╡Лр┤Чр┤В', 'р┤зр╡Нр┤пр┤╛р┤ир┤В',
      
      // Core concepts - Bengali
      'ржзрж░рзНржо', 'ржмрзЗржж', 'рж╣рж┐ржирзНржжрзБ', 'рж╕ржирж╛рждржи', 'рж╕ржорзНржкрзНрж░ржжрж╛ржпрж╝', 'ржкрж░ржорзНржкрж░рж╛', 'ржкрзВржЬрж╛',
      'ржпржЬрзНржЮ', 'ржоржирзНрждрзНрж░', 'рж╢рзНрж▓рзЛржХ', 'рж╕ржВрж╕рзНржХрзГржд', 'ржпрзЛржЧ', 'ржзрзНржпрж╛ржи',
      
      // Core concepts - Gujarati
      'ркзрк░рлНрко', 'рк╡рлЗркж', 'рк╣рк┐ркВркжрлБ', 'рк╕ркирк╛ркдрки', 'рк╕ркВрккрлНрк░ркжрк╛ркп', 'рккрк░ркВрккрк░рк╛', 'рккрлВркЬрк╛',
      'ркпркЬрлНркЮ', 'ркоркВркдрлНрк░', 'рк╢рлНрк▓рлЛркХ', 'рк╕ркВрк╕рлНркХрлГркд', 'ркпрлЛркЧ', 'ркзрлНркпрк╛рки',
      
      // Scriptures and texts - English
      'ramayana', 'mahabharata', 'bhagavad', 'gita', 'purana', 'puranas',
      'upanishad', 'upanishads', 'smriti', 'shruti', 'agama', 'tantra',
      
      // Scriptures - Hindi
      'рд░рд╛рдорд╛рдпрдг', 'рдорд╣рд╛рднрд╛рд░рдд', 'рднрдЧрд╡рджреНрдЧреАрддрд╛', 'рдЧреАрддрд╛', 'рдкреБрд░рд╛рдг', 'рдЙрдкрдирд┐рд╖рджреН',
      'рд╕реНрдореГрддрд┐', 'рд╢реНрд░реБрддрд┐', 'рдЖрдЧрдо', 'рддрдВрддреНрд░',
      
      // Scriptures - Tamil
      'ро░ро╛рооро╛ропрогроорпН', 'роороХро╛рокро╛ро░родроорпН', 'рокроХро╡родрпНроХрпАродрпИ', 'роХрпАродрпИ', 'рокрпБро░ро╛рогроорпН', 'роЙрокроиро┐ро╖родрпН',
      'ро╕рпНрооро┐ро░рпБродро┐', 'ро╢рпНро░рпБродро┐', 'роЖроХроороорпН', 'родроирпНродро┐ро░роорпН',
      
      // Scriptures - Telugu
      'р░░р░╛р░ор░╛р░пр░гр░В', 'р░ор░╣р░╛р░нр░╛р░░р░др░В', 'р░нр░Чр░╡р░жр▒Нр░Чр▒Ар░д', 'р░Чр▒Ар░д', 'р░кр▒Бр░░р░╛р░гр░В', 'р░Йр░кр░ир░┐р░╖р░др▒Нр░др▒Б',
      'р░╕р▒Нр░ор▒Гр░др░┐', 'р░╢р▒Нр░░р▒Бр░др░┐', 'р░Жр░Чр░ор░В', 'р░др░Вр░др▒Нр░░р░В',
      
      // Scriptures - Kannada
      'р▓░р▓╛р▓ор▓╛р▓пр▓г', 'р▓ор▓╣р▓╛р▓нр▓╛р▓░р▓д', 'р▓нр▓Чр▓╡р▓жр│Нр▓Чр│Ар▓др│Ж', 'р▓Чр│Ар▓др│Ж', 'р▓кр│Бр▓░р▓╛р▓г', 'р▓Йр▓кр▓ир▓┐р▓╖р▓др│Нр▓др│Б',
      'р▓╕р│Нр▓ор│Гр▓др▓┐', 'р▓╢р│Нр▓░р│Бр▓др▓┐', 'р▓Жр▓Чр▓о', 'р▓др▓Вр▓др│Нр▓░',
      
      // Deities - English
      'krishna', 'rama', 'shiva', 'vishnu', 'brahma', 'devi', 'ganesha',
      'hanuman', 'lakshmi', 'saraswati', 'durga', 'kali', 'parvati',
      'indra', 'surya', 'yama', 'vayu', 'bhagavan', 'bhagwan', 'ishwar', 'paramatma',
      'kesava', 'keshava', 'govinda', 'madhava', 'narayana', 'vasudeva',
      
      // Deities - Hindi
      'рдХреГрд╖реНрдг', 'рд░рд╛рдо', 'рд╢рд┐рд╡', 'рд╡рд┐рд╖реНрдгреБ', 'рдмреНрд░рд╣реНрдорд╛', 'рджреЗрд╡реА', 'рдЧрдгреЗрд╢', 'рдЧрдгрдкрддрд┐',
      'рд╣рдиреБрдорд╛рди', 'рд▓рдХреНрд╖реНрдореА', 'рд╕рд░рд╕реНрд╡рддреА', 'рджреБрд░реНрдЧрд╛', 'рдХрд╛рд▓реА', 'рдкрд╛рд░реНрд╡рддреА', 'рдЗрдВрджреНрд░',
      'рд╕реВрд░реНрдп', 'рдпрдо', 'рд╡рд╛рдпреБ', 'рднрдЧрд╡рд╛рдиреН', 'рдИрд╢реНрд╡рд░', 'рдкрд░рдорд╛рддреНрдорд╛', 'рдХреЗрд╢рд╡', 'рдЧреЛрд╡рд┐рдВрдж',
      'рдорд╛рдзрд╡', 'рдирд╛рд░рд╛рдпрдг', 'рд╡рд╛рд╕реБрджреЗрд╡',
      
      // Deities - Tamil
      'роХро┐ро░рпБро╖рпНрогройрпН', 'ро░ро╛рооройрпН', 'роЪро┐ро╡ройрпН', 'ро╡ро┐ро╖рпНрогрпБ', 'рокро┐ро░роорпНрооро╛', 'родрпЗро╡ро┐', 'роХрогрпЗроЪройрпН',
      'роЕройрпБрооро╛ройрпН', 'ро▓роХрпНро╖рпНрооро┐', 'роЪро░ро╕рпНро╡родро┐', 'родрпБро░рпНроХрпИ', 'роХро╛ро│ро┐', 'рокро╛ро░рпНро╡родро┐',
      'роЗроирпНродро┐ро░ройрпН', 'роЪрпВро░ро┐ропройрпН', 'ропрооройрпН', 'ро╡ро╛ропрпБ', 'рокроХро╡ро╛ройрпН', 'роИро╕рпНро╡ро░ройрпН',
      
      // Deities - Telugu
      'р░Хр▒Гр░╖р▒Нр░гр▒Бр░бр▒Б', 'р░░р░╛р░ор▒Бр░бр▒Б', 'р░╢р░┐р░╡р▒Бр░бр▒Б', 'р░╡р░┐р░╖р▒Нр░гр▒Бр░╡р▒Б', 'р░мр▒Нр░░р░╣р▒Нр░о', 'р░жр▒Зр░╡р░┐', 'р░Чр░гр▒Зр░╢р▒Бр░бр▒Б',
      'р░╣р░ир▒Бр░ор░Вр░др▒Бр░бр▒Б', 'р░▓р░Хр▒Нр░╖р▒Нр░ор░┐', 'р░╕р░░р░╕р▒Нр░╡р░др░┐', 'р░жр▒Бр░░р▒Нр░Ч', 'р░Хр░╛р░│р░┐', 'р░кр░╛р░░р▒Нр░╡р░др░┐',
      'р░Зр░Вр░жр▒Нр░░р▒Бр░бр▒Б', 'р░╕р▒Вр░░р▒Нр░пр▒Бр░бр▒Б', 'р░пр░ор▒Бр░бр▒Б', 'р░╡р░╛р░пр▒Бр░╡р▒Б', 'р░нр░Чр░╡р░╛р░ир▒Н', 'р░Ир░╢р▒Нр░╡р░░р▒Бр░бр▒Б',
      
      // Deities - Kannada
      'р▓Хр│Гр▓╖р│Нр▓г', 'р▓░р▓╛р▓о', 'р▓╢р▓┐р▓╡', 'р▓╡р▓┐р▓╖р│Нр▓гр│Б', 'р▓мр│Нр▓░р▓╣р│Нр▓о', 'р▓жр│Зр▓╡р▓┐', 'р▓Чр▓гр│Зр▓╢',
      'р▓╣р▓ир│Бр▓ор▓╛р▓ир│Н', 'р▓▓р▓Хр│Нр▓╖р│Нр▓ор│А', 'р▓╕р▓░р▓╕р│Нр▓╡р▓др▓┐', 'р▓жр│Бр▓░р│Нр▓Чр▓╛', 'р▓Хр▓╛р▓│р▓┐', 'р▓кр▓╛р▓░р│Нр▓╡р▓др▓┐',
      'р▓Зр▓Вр▓жр│Нр▓░', 'р▓╕р│Вр▓░р│Нр▓п', 'р▓пр▓о', 'р▓╡р▓╛р▓пр│Б', 'р▓нр▓Чр▓╡р▓╛р▓ир│Н', 'р▓Ир▓╢р│Нр▓╡р▓░',
      
      // Festivals - English
      'diwali', 'deepavali', 'holi', 'navratri', 'dussehra', 'dasara', 'dussera', 'janmashtami', 'shivaratri',
      'karva', 'chauth', 'ekadashi', 'amavasya', 'purnima', 'vrat', 'vratam',
      'vijaya', 'dasami', 'dashami', 'ashatami', 'ashtami', 'maha', 'navami',
      
      // Festivals - Hindi
      'рджреАрд╡рд╛рд▓реА', 'рджреАрдкрд╛рд╡рд▓реА', 'рд╣реЛрд▓реА', 'рдирд╡рд░рд╛рддреНрд░рд┐', 'рджрд╢рд╣рд░рд╛', 'рдЬрдиреНрдорд╛рд╖реНрдЯрдореА', 'рд╢рд┐рд╡рд░рд╛рддреНрд░рд┐',
      'рдХрд░рд╡рд╛ рдЪреМрде', 'рдПрдХрд╛рджрд╢реА', 'рдЕрдорд╛рд╡рд╕реНрдпрд╛', 'рдкреВрд░реНрдгрд┐рдорд╛', 'рд╡реНрд░рдд', 'рд╡рд┐рдЬрдпрд╛ рджрд╢рдореА',
      'рдЕрд╖реНрдЯрдореА', 'рдорд╣рд╛ рдирд╡рдореА',
      
      // Festivals - Tamil
      'родрпАрокро╛ро╡ро│ро┐', 'ро╣рпЛро▓ро┐', 'роиро╡ро░ро╛родрпНродро┐ро░ро┐', 'ро╡ро┐роЬропродроЪрооро┐', 'роЬройрпНрооро╛ро╖рпНроЯрооро┐', 'роЪро┐ро╡ро░ро╛родрпНродро┐ро░ро┐',
      'роПроХро╛родроЪро┐', 'роЕрооро╛ро╡ро╛роЪрпИ', 'рокрпМро░рпНрогрооро┐', 'ро╡ро┐ро░родроорпН', 'роЕро╖рпНроЯрооро┐', 'роороХро╛ роиро╡рооро┐',
      
      // Festivals - Telugu
      'р░жр▒Ар░кр░╛р░╡р░│р░┐', 'р░╣р▒Лр░│р░┐', 'р░ир░╡р░░р░╛р░др▒Нр░░р▒Бр░▓р▒Б', 'р░╡р░┐р░Ьр░пр░жр░╢р░ор░┐', 'р░Ьр░ир▒Нр░ор░╛р░╖р▒Нр░Яр░ор░┐', 'р░╢р░┐р░╡р░░р░╛р░др▒Нр░░р░┐',
      'р░Пр░Хр░╛р░жр░╢р░┐', 'р░Ер░ор░╛р░╡р░╛р░╕р▒Нр░п', 'р░кр▒Мр░░р▒Нр░гр░ор░┐', 'р░╡р▒Нр░░р░др░В', 'р░Ер░╖р▒Нр░Яр░ор░┐', 'р░ор░╣р░╛ р░ир░╡р░ор░┐',
      
      // Festivals - Kannada
      'р▓жр│Ар▓кр▓╛р▓╡р▓│р▓┐', 'р▓╣р│Лр▓│р▓┐', 'р▓ир▓╡р▓░р▓╛р▓др│Нр▓░р▓┐', 'р▓╡р▓┐р▓Ьр▓пр▓жр▓╢р▓ор▓┐', 'р▓Ьр▓ир│Нр▓ор▓╛р▓╖р│Нр▓Яр▓ор▓┐', 'р▓╢р▓┐р▓╡р▓░р▓╛р▓др│Нр▓░р▓┐',
      'р▓Пр▓Хр▓╛р▓жр▓╢р▓┐', 'р▓Ер▓ор▓╛р▓╡р▓╛р▓╕р│Нр▓пр│Ж', 'р▓кр│Мр▓░р│Нр▓гр▓ор▓┐', 'р▓╡р│Нр▓░р▓д', 'р▓Ер▓╖р│Нр▓Яр▓ор▓┐', 'р▓ор▓╣р▓╛ р▓ир▓╡р▓ор▓┐',
      
      // Practices - English
      'nama', 'nam', 'namam', 'japa', 'kirtan', 'bhajan', 'chanting',
      'prayer', 'prayers', 'prarthana', 'supplication', 'invocation', 'vandana',
      'namaskara', 'prostration', 'aradhana', 'upasana', 'bhakti', 'devotion',
      'sandhya', 'vandanam', 'nitya', 'karma', 'daily', 'routine', 'worship',
      'aarti', 'archana', 'abhishek', 'rudrabhishek',
      
      // Practices - Hindi  
      'рдирд╛рдо', 'рдЬрдк', 'рдХреАрд░реНрддрди', 'рднрдЬрди', 'рдкреНрд░рд╛рд░реНрдердирд╛', 'рд╡рдВрджрдирд╛', 'рдирдорд╕реНрдХрд╛рд░',
      'рдЖрд░рд╛рдзрдирд╛', 'рдЙрдкрд╛рд╕рдирд╛', 'рднрдХреНрддрд┐', 'рд╕рдВрдзреНрдпрд╛', 'рдирд┐рддреНрдп рдХрд░реНрдо', 'рдкреВрдЬрд╛',
      'рдЖрд░рддреА', 'рдЕрд░реНрдЪрдирд╛', 'рдЕрднрд┐рд╖реЗрдХ', 'рд░реБрджреНрд░рд╛рднрд┐рд╖реЗрдХ',
      
      // Practices - Tamil
      'роиро╛роороорпН', 'роЬрокроорпН', 'роХрпАро░рпНродрпНродройрпИ', 'рокроЬройрпИ', 'рокро┐ро░ро╛ро░рпНродрпНродройрпИ', 'ро╡роирпНродройроорпН', 'роирооро╕рпНроХро╛ро░роорпН',
      'роЖро░ро╛родройрпИ', 'роЙрокро╛роЪройрпИ', 'рокроХрпНродро┐', 'роЪроирпНродрпНропро╛', 'роиро┐родрпНроп роХро░рпНроороорпН', 'роЖро░родрпНродро┐',
      'роЕро░рпНроЪрпНроЪройрпИ', 'роЕрокро┐ро╖рпЗроХроорпН',
      
      // Practices - Telugu
      'р░ир░╛р░ор░В', 'р░Ьр░кр░В', 'р░Хр▒Ар░░р▒Нр░др░и', 'р░нр░Ьр░и', 'р░кр▒Нр░░р░╛р░░р▒Нр░ер░и', 'р░╡р░Вр░жр░ир░В', 'р░ир░ор░╕р▒Нр░Хр░╛р░░р░В',
      'р░Жр░░р░╛р░зр░и', 'р░Йр░кр░╛р░╕р░и', 'р░нр░Хр▒Нр░др░┐', 'р░╕р░Вр░зр▒Нр░п', 'р░ир░┐р░др▒Нр░п р░Хр░░р▒Нр░о', 'р░Жр░░р░др░┐',
      'р░Ер░░р▒Нр░Ър░и', 'р░Ер░нр░┐р░╖р▒Зр░Хр░В',
      
      // Practices - Kannada
      'р▓ир▓╛р▓о', 'р▓Ьр▓к', 'р▓Хр│Ар▓░р│Нр▓др▓ир│Ж', 'р▓нр▓Ьр▓ир│Ж', 'р▓кр│Нр▓░р▓╛р▓░р│Нр▓ер▓ир│Ж', 'р▓╡р▓Вр▓жр▓ир│Ж', 'р▓ир▓ор▓╕р│Нр▓Хр▓╛р▓░',
      'р▓Жр▓░р▓╛р▓зр▓ир│Ж', 'р▓Йр▓кр▓╛р▓╕р▓ир│Ж', 'р▓нр▓Хр│Нр▓др▓┐', 'р▓╕р▓Вр▓зр│Нр▓пр│Ж', 'р▓ир▓┐р▓др│Нр▓п р▓Хр▓░р│Нр▓о', 'р▓Жр▓░р▓др▓┐',
      'р▓Ер▓░р│Нр▓Ър▓ир│Ж', 'р▓Ер▓нр▓┐р▓╖р│Зр▓Х',
      
      // Specific scriptures and texts
      'vishnu', 'purana', 'shiva', 'purana', 'brahma', 'purana', 'skanda',
      'garuda', 'varaha', 'kurma', 'matsya', 'vamana', 'narada', 'markandeya',
      'brahmanda', 'bhavishya', 'linga', 'padma', 'agni', 'vayu', 'bhagavata',
      'isha', 'kena', 'katha', 'prashna', 'mundaka', 'mandukya', 'taittiriya',
      'aitareya', 'chandogya', 'brihadaranyaka', 'svetasvatara', 'kaushitaki',
      
      // Itihasas and Kavyas
      'itihasa', 'itihasas', 'epic', 'kavya', 'kavyas', 'raghuvamsha',
      'kumarasambhava', 'meghaduta', 'ritusamhara', 'kalidasa', 'bhartrhari',
      'jayadeva', 'gita', 'govinda', 'gitagovinda', 'kadamba', 'kadambas',
      
      // Samhitas and Vedic texts
      'samhita', 'samhitas', 'rig', 'sama', 'yajur', 'atharva', 'brahmana',
      'aranyaka', 'kalpa', 'sutra', 'grihya', 'dharma', 'shrauta',
      
      // Vedic hymns and mantras
      'purusha', 'suktam', 'sukta', 'hymn', 'shri', 'rudram', 'chamakam',
      'gayatri', 'mahamrityunjaya', 'vishnu', 'sahasranama', 'lalita',
      'sahasranama', 'hanuman', 'chalisa', 'aditya', 'hridayam', 'durga',
      'kavach', 'stotram', 'stotra', 'ashtak', 'ashtakam', 'aarti', 'bhajan',
      'mantra', 'shloka', 'sloka', 'verse', 'chant', 'recitation', 'parayana',
      
      // Madhva sampradaya scriptures and texts
      'madhva', 'madhwa', 'dvaita', 'raghavendra', 'stotram', 'rayaru',
      'anuvyakhyana', 'brahma', 'sutra', 'bhashya', 'gita', 'bhashya',
      'bhagavata', 'tatparya', 'nirnaya', 'mahabharata', 'tatparya', 'nirnaya',
      'vishnu', 'tattva', 'vinirnaya', 'karma', 'nirnaya', 'pramana', 'lakshana',
      'upadhi', 'khandana', 'mayavada', 'khandana', 'tattvodyota', 'nyayavivarana',
      'anu', 'taratamya', 'stotra', 'dvadasha', 'stotra', 'narasimha', 'nakha',
      'raghavendra', 'vijaya', 'guru', 'raghavendra', 'charitra', 'mantralaya',
      'panchamukhi', 'hanuman', 'kavach', 'vayu', 'stuti', 'hari', 'vayu', 'stuti',
      
      // Vishnu avatars and forms
      'narasimha', 'varaha', 'vamana', 'parashurama', 'kalki', 'buddha', 'matsya', 'kurma',
      'jagannath', 'vitthal', 'vithoba', 'panduranga', 'hari', 'mukunda', 'damodara',
      
      // Shiva forms and names
      'rudra', 'nataraja', 'bhairava', 'mahadeva', 'mahesh', 'shankar', 'bholenath',
      'neelkanth', 'gangadhar', 'ardhanarishwar', 'dakshinamurthy',
      
      // Devi forms and names
      'shakti', 'amba', 'ambika', 'chandi', 'chamunda', 'bhavani', 'jagadamba',
      'mahamaya', 'bhairavi', 'tara', 'chinnamasta', 'bagalamukhi', 'matangi',
      'kamala', 'tripura', 'sundari', 'bhuvaneshwari', 'dhumavati', 'bagala',
      
      // Ganesha names
      'ganapati', 'vinayaka', 'vighnaharta', 'lambodara', 'ekadanta',
      
      // Kartikeya/Murugan names
      'kartikeya', 'murugan', 'skanda', 'subramanya', 'kumara', 'shadanana',
      
      // Hanuman names
      'anjaneya', 'maruti', 'pavanaputra', 'kesarisuta', 'bajrangbali',
      
      // Planetary deities
      'chandra', 'soma', 'mangal', 'angaraka', 'budh', 'guru', 'brihaspati',
      'shukra', 'shani', 'rahu', 'ketu', 'navagraha',
      
      // Directional guardians
      'agni', 'nirrti', 'varuna', 'kubera', 'ishana', 'dikpala',
      
      // River goddesses
      'ganga', 'yamuna', 'godavari', 'kaveri', 'narmada', 'sindhu',
      
      // Other important deities
      'brahmaputra', 'kamadeva', 'rati', 'vasant', 'kubera', 'yaksha',
      'gandharva', 'apsara', 'kinnar', 'garuda', 'nandi', 'vahana',
      
      // Vratas and religious observances
      'teej', 'hartalika', 'navaratri', 'durga', 'kali', 'lakshmi', 'saraswati',
      'vinayaka', 'chaturthi', 'gokulashtami', 'rama', 'navami', 'vijaya', 'dashami',
      'pradosh', 'masik', 'shivaratri', 'mahashivaratri', 'sawan', 'shravan',
      'monday', 'somvar', 'mangalwar', 'tuesday', 'thursday', 'brihaspativar',
      'friday', 'shukravar', 'saturday', 'shanivar', 'fast', 'fasting', 'upvas',
      'solah', 'somvar', 'mangala', 'gauri', 'santoshi', 'mata', 'jagran',
      'jagrata', 'aarti', 'puja', 'archana', 'abhishek', 'rudrabhishek',
      
      // Vedic Astrology and Jyotish
      'jyotish', 'astrology', 'horoscope', 'kundli', 'kundali', 'birth', 'chart',
      'panchang', 'tithi', 'vara', 'nakshatra', 'yoga', 'karana', 'muhurat',
      'planets', 'graha', 'sun', 'surya', 'moon', 'chandra', 'mars', 'mangal',
      'mercury', 'budh', 'jupiter', 'guru', 'brihaspati', 'venus', 'shukra',
      'saturn', 'shani', 'rahu', 'ketu', 'zodiac', 'rashi', 'sign',
      'aries', 'mesha', 'taurus', 'vrishabha', 'gemini', 'mithuna',
      'cancer', 'karka', 'leo', 'simha', 'virgo', 'kanya', 'libra', 'tula',
      'scorpio', 'vrishchika', 'sagittarius', 'dhanu', 'capricorn', 'makara',
      'aquarius', 'kumbha', 'pisces', 'meena', 'lagna', 'ascendant', 'house',
      'bhava', 'dasha', 'antardasha', 'mahadasha', 'transit', 'gochar',
      'manglik', 'kuja', 'dosha', 'yoga', 'raj', 'gaja', 'kesari', 'neecha',
      'uchcha', 'exalted', 'debilitated', 'combust', 'retrograde', 'vakri',
      'gemstone', 'ratna', 'rudraksha', 'yantra', 'remedy', 'upay', 'donation',
      
      // Philosophical concepts
      'karma', 'moksha', 'samsara', 'atman', 'brahman', 'ahimsa',
      'dharana', 'samadhi', 'pranayama', 'asana', 'chakra',
      
      // Practices and customs
      'ashram', 'guru', 'disciple', 'satsang', 'bhajan', 'kirtan',
      'pilgrimage', 'tirtha', 'yatra', 'kumbh', 'ganga', 'ganges',
      'ayurveda', 'jyotish', 'astrology', 'vastu',
      
      // Religious institutions and monasteries
      'math', 'matha', 'mutt', 'monastery', 'uttaradi', 'dvaita', 'advaita',
      'madhva', 'shankara', 'ramanuja', 'chaitanya', 'iskcon', 'arya samaj',
      
      // Life stages and social
      'grihastha', 'brahmachari', 'vanaprastha', 'sannyasa',
      'varna', 'ashrama', 'samskar', 'sanskar',
      
      // Languages and cultural
      'tamil', 'telugu', 'kannada', 'malayalam', 'bengali', 'gujarati',
      'marathi', 'punjabi', 'oriya', 'assamese', 'hindi',
      
      // Common terms that appear in Indic languages
      'рднрдЧрд╡рд╛рди', 'рджреЗрд╡', 'рдорд╛рддрд╛', 'рдкрд┐рддрд╛', 'рдЧреБрд░реБ', 'рд╢рд┐рд╖реНрдп', 'рдЖрдЪрд╛рд░реНрдп', 'рд╕реНрд╡рд╛рдореА',
      'рдорд╣рд╛рд░рд╛рдЬ', 'рд╕рдВрдд', 'рд╕рд╛рдзреБ', 'рдЛрд╖рд┐', 'рдореБрдирд┐', 'рддрдкрд╕реНрд╡реА', 'рдпреЛрдЧреА',
      
      // Telugu terms
      'р░нр░Чр░╡р░╛р░ир▒Н', 'р░жр▒Зр░╡р▒Бр░бр▒Б', 'р░Ер░ор▒Нр░о', 'р░др░▓р▒Нр░▓р░┐', 'р░др░Вр░бр▒Нр░░р░┐', 'р░Чр▒Бр░░р▒Бр░╡р▒Б', 'р░Жр░Ър░╛р░░р▒Нр░п', 'р░╕р▒Нр░╡р░╛р░ор░┐',
      'р░ор░╣р░╛р░░р░╛р░Ьр▒Н', 'р░╕р░Вр░др▒Бр░бр▒Б', 'р░╕р░╛р░зр▒Бр░╡р▒Б', 'р░Лр░╖р░┐', 'р░ор▒Бр░ир░┐', 'р░пр▒Лр░Чр░┐', 'р░░р░╛р░ор▒Бр░бр▒Б', 'р░Хр▒Гр░╖р▒Нр░гр▒Бр░бр▒Б',
      'р░╣р░ир▒Бр░ор░╛р░ир▒Н', 'р░Чр░гр▒Зр░╢р▒Н', 'р░╢р░┐р░╡р▒Бр░бр▒Б', 'р░╡р░┐р░╖р▒Нр░гр▒Бр░╡р▒Б', 'р░▓р░Хр▒Нр░╖р▒Нр░ор░┐', 'р░╕р░░р░╕р▒Нр░╡р░др░┐', 'р░жр▒Бр░░р▒Нр░Ч',
      'р░╡р░┐р░Ьр░пр░жр░╢р░ор░┐', 'р░╡р░┐р░Ьр░п', 'р░жр░╢р░ор░┐', 'р░жр░╕р░░р░╛', 'р░ир░╡р░░р░╛р░др▒Нр░░р░┐', 'р░жр▒Ар░кр░╛р░╡р░│р░┐', 'р░╣р▒Лр░▓р░┐',
      'р░Йр░Чр░╛р░жр░┐', 'р░╡р▒Ир░Хр▒Бр░Вр░а', 'р░Пр░Хр░╛р░жр░╢р░┐', 'р░Ер░╖р▒Нр░Яр░ор░┐', 'р░Ър░др▒Бр░░р▒Нр░жр░╢р░┐', 'р░кр▒Вр░░р▒Нр░гр░┐р░о', 'р░Ер░ор░╛р░╡р░╛р░╕р▒Нр░п',
      'р░др░┐р░░р▒Бр░кр░др░┐', 'р░╢р▒Нр░░р▒Ар░╡р░╛р░░р░┐', 'р░мр░╛р░▓р░╛р░Ьр▒А', 'р░╡р▒Зр░Вр░Хр░Яр▒Зр░╢р▒Нр░╡р░░', 'р░░р░╛р░ор▒Зр░╢р▒Нр░╡р░░р░В', 'р░Хр░╛р░╢р▒А',
      
      // Kannada terms
      'р▓нр▓Чр▓╡р▓╛р▓ир│Н', 'р▓жр│Зр▓╡р▓░р│Б', 'р▓Ер▓ор│Нр▓о', 'р▓др▓╛р▓пр▓┐', 'р▓др▓Вр▓жр│Ж', 'р▓Чр│Бр▓░р│Б', 'р▓Жр▓Ър▓╛р▓░р│Нр▓п', 'р▓╕р│Нр▓╡р▓╛р▓ор▓┐',
      'р▓ор▓╣р▓╛р▓░р▓╛р▓Ь', 'р▓╕р▓Вр▓д', 'р▓╕р▓╛р▓зр│Б', 'р▓Лр▓╖р▓┐', 'р▓ор│Бр▓ир▓┐', 'р▓пр│Лр▓Чр▓┐', 'р▓░р▓╛р▓о', 'р▓Хр│Гр▓╖р│Нр▓г',
      'р▓╣р▓ир│Бр▓ор▓╛р▓ир│Н', 'р▓Чр▓гр│Зр▓╢', 'р▓╢р▓┐р▓╡', 'р▓╡р▓┐р▓╖р│Нр▓гр│Б', 'р▓▓р▓Хр│Нр▓╖р│Нр▓ор▓┐', 'р▓╕р▓░р▓╕р│Нр▓╡р▓др▓┐', 'р▓жр│Бр▓░р│Нр▓Чр│Ж',
      'р▓╡р▓┐р▓Ьр▓пр▓жр▓╢р▓ор▓┐', 'р▓╡р▓┐р▓Ьр▓п', 'р▓жр▓╢р▓ор▓┐', 'р▓жр▓╕р▓░р▓╛', 'р▓ир▓╡р▓░р▓╛р▓др│Нр▓░р▓┐', 'р▓жр│Ар▓кр▓╛р▓╡р▓│р▓┐', 'р▓╣р│Лр▓│р▓┐',
      'р▓Йр▓Чр▓╛р▓жр▓┐', 'р▓╡р│Ир▓Хр│Бр▓Вр▓а', 'р▓Пр▓Хр▓╛р▓жр▓╢р▓┐', 'р▓Ер▓╖р│Нр▓Яр▓ор▓┐', 'р▓Ър▓др│Бр▓░р│Нр▓жр▓╢р▓┐', 'р▓кр│Вр▓░р│Нр▓гр▓┐р▓ор│Ж', 'р▓Ер▓ор▓╛р▓╡р▓╛р▓╕р│Нр▓пр│Ж',
      'р▓др▓┐р▓░р│Бр▓кр▓др▓┐', 'р▓╢р│Нр▓░р│Ар▓ир▓┐р▓╡р▓╛р▓╕', 'р▓мр▓╛р▓▓р▓╛р▓Ьр▓┐', 'р▓╡р│Жр▓Вр▓Хр▓Яр│Зр▓╢р│Нр▓╡р▓░', 'р▓░р▓╛р▓ор│Зр▓╢р│Нр▓╡р▓░р▓В', 'р▓Хр▓╛р▓╢р▓┐',
      
      // Marathi terms
      'рднрдЧрд╡рд╛рди', 'рджреЗрд╡', 'рдЖрдИ', 'рдорд╛рддрд╛', 'рдмрд╛рдк', 'рдЧреБрд░реБ', 'рдЖрдЪрд╛рд░реНрдп', 'рд╕реНрд╡рд╛рдореА',
      'рдорд╣рд╛рд░рд╛рдЬ', 'рд╕рдВрдд', 'рд╕рд╛рдзреВ', 'рдЛрд╖реА', 'рдореБрдиреА', 'рдпреЛрдЧреА', 'рд░рд╛рдо', 'рдХреГрд╖реНрдг',
      'рд╣рдиреБрдорд╛рди', 'рдЧрдгреЗрд╢', 'рд╢рд┐рд╡', 'рд╡рд┐рд╖реНрдгреВ', 'рд▓рдХреНрд╖реНрдореА', 'рд╕рд░рд╕реНрд╡рддреА', 'рджреБрд░реНрдЧрд╛',
      'рд╡рд┐рдЬрдпрд╛рджрд╢рдореА', 'рд╡рд┐рдЬрдпрд╛', 'рджрд╢рдореА', 'рджрд╕рд░рд╛', 'рдирд╡рд░рд╛рддреНрд░реА', 'рджрд┐рд╡рд╛рд│реА', 'рд╣реЛрд│реА',
      'рдЧреБрдвреАрдкрд╛рдбрд╡рд╛', 'рд╡реИрдХреБрдВрда', 'рдПрдХрд╛рджрд╢реА', 'рдЕрд╖реНрдЯрдореА', 'рдЪрддреБрд░реНрджрд╢реА', 'рдкреМрд░реНрдгрд┐рдорд╛', 'рдЕрдорд╛рд╡рд╕реНрдпрд╛',
      'рддрд┐рд░реБрдкрддреА', 'рд╢реНрд░реАрд╣рд░реА', 'рдмрд╛рд│рд╛рдЬреА', 'рд╡реЗрдВрдХрдЯреЗрд╢реНрд╡рд░', 'рд░рд╛рдореЗрд╢реНрд╡рд░рдореН', 'рдХрд╛рд╢реА',
      
      // Sacred places and temples
      'рддреАрд░реНрде', 'рдордВрджрд┐рд░', 'рдХрд╛рд╢реА', 'рд╡реГрдВрджрд╛рд╡рди', 'рдордереБрд░рд╛', 'рд╣рд░рд┐рджреНрд╡рд╛рд░', 'рдЛрд╖рд┐рдХреЗрд╢',
      'рддрд┐рд░реБрдкрддрд┐', 'рд░рд╛рдореЗрд╢реНрд╡рд░рдореН', 'рджреНрд╡рд╛рд░рдХрд╛', 'рдкреБрд░реА', 'рдмрджреНрд░реАрдирд╛рде', 'рдХреЗрджрд╛рд░рдирд╛рде'
    ];

    // Normalize the question for better Indic script matching
    const normalizedQuestion = normalizeText(question);
    
    console.log('ЁЯФН Validation Debug:', {
      originalQuestion: question,
      normalizedQuestion: normalizedQuestion,
      questionLength: question.length,
      containsTeluguChars: /[\u0C00-\u0C7F]/.test(question)
    });
    
    // Check if question contains any Hindu Dharma related keywords
    const hasKeywords = hinduDharmaKeywords.some(keyword => {
      const normalizedKeyword = normalizeText(keyword);
      const match1 = normalizedQuestion.includes(normalizedKeyword);
      const match2 = normalizedQuestion.includes(keyword);
      const match3 = question.includes(keyword);
      
      if (match1 || match2 || match3) {
        console.log('тЬЕ Keyword match found:', {
          keyword,
          normalizedKeyword,
          match1, match2, match3
        });
        return true;
      }
      return false;
    });
    
    console.log('ЁЯОп Keywords validation result:', hasKeywords);
    
    // Additional pattern matching for Indian cultural context
    const culturalPatterns = [
      /\b(indian|bharat|hindustan)\s+(culture|tradition|custom|ritual)/i,
      /\b(spiritual|religious)\s+(practice|tradition|custom)/i,
      /\b(ancient|traditional)\s+(indian|hindu|vedic)/i,
      /\b(temple|mandir|shrine)/i,
      /\b(priest|pandit|acharya|swami|maharaj)/i,
      /\b(blessing|bless|grace|divine)/i
    ];
    
    const hasPatterns = culturalPatterns.some(pattern => pattern.test(question));
    
    return hasKeywords || hasPatterns;
  };

  const sendMessage = async () => {
    if (!input.trim() || isLoading) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      content: input,
      role: 'user',
      timestamp: new Date(),
    };

    setMessages(prev => [...prev, userMessage]);
    const currentInput = input;
    setInput('');
    setIsLoading(true);

    try {
      // Validate if question is related to Hindu Dharma
      if (!isHinduDharmaRelated(currentInput)) {
        const getOffTopicResponse = (lang: string): string => {
          const responses = {
            english: `ЁЯЩП Namaste! I'm specifically designed to help with questions about Hindu Dharma, Vedic traditions, rituals, sampradayas, and related spiritual wisdom.

Your question seems to be outside this scope. I'd be happy to help you with:
тАв Vedic scriptures and their teachings
тАв Hindu festivals and their significance  
тАв Spiritual practices and rituals
тАв Sampradayas and traditions
тАв Dharmic philosophy and concepts
тАв Sanskrit texts and mantras

Please feel free to ask anything related to Hindu Dharma, and I'll do my best to provide helpful guidance! ЁЯХЙя╕П`,

            hindi: `ЁЯЩП рдирдорд╕реНрддреЗ! рдореИрдВ рд╡рд┐рд╢реЗрд╖ рд░реВрдк рд╕реЗ рд╣рд┐рдВрджреВ рдзрд░реНрдо, рд╡реИрджрд┐рдХ рдкрд░рдВрдкрд░рд╛рдУрдВ, рдЕрдиреБрд╖реНрдард╛рдиреЛрдВ, рд╕рдВрдкреНрд░рджрд╛рдпреЛрдВ рдФрд░ рд╕рдВрдмрдВрдзрд┐рдд рдЖрдзреНрдпрд╛рддреНрдорд┐рдХ рдЬреНрдЮрд╛рди рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдкреНрд░рд╢реНрдиреЛрдВ рдореЗрдВ рд╕рд╣рд╛рдпрддрд╛ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдмрдирд╛рдпрд╛ рдЧрдпрд╛ рд╣реВрдВред

рдЖрдкрдХрд╛ рдкреНрд░рд╢реНрди рдЗрд╕ рдХреНрд╖реЗрддреНрд░ рд╕реЗ рдмрд╛рд╣рд░ рд▓рдЧрддрд╛ рд╣реИред рдореИрдВ рдЖрдкрдХреА рд╕рд╣рд╛рдпрддрд╛ рдХрд░рдиреЗ рдореЗрдВ рдЦреБрд╢ рд╣реВрдВрдЧрд╛:
тАв рд╡реИрджрд┐рдХ рд╢рд╛рд╕реНрддреНрд░ рдФрд░ рдЙрдирдХреА рд╢рд┐рдХреНрд╖рд╛рдПрдВ
тАв рд╣рд┐рдВрджреВ рддреНрдпреЛрд╣рд╛рд░ рдФрд░ рдЙрдирдХрд╛ рдорд╣рддреНрд╡
тАв рдЖрдзреНрдпрд╛рддреНрдорд┐рдХ рдкреНрд░рдерд╛рдПрдВ рдФрд░ рдЕрдиреБрд╖реНрдард╛рди
тАв рд╕рдВрдкреНрд░рджрд╛рдп рдФрд░ рдкрд░рдВрдкрд░рд╛рдПрдВ
тАв рдзрд╛рд░реНрдорд┐рдХ рджрд░реНрд╢рди рдФрд░ рдЕрд╡рдзрд╛рд░рдгрд╛рдПрдВ
тАв рд╕рдВрд╕реНрдХреГрдд рдЧреНрд░рдВрде рдФрд░ рдордВрддреНрд░

рдХреГрдкрдпрд╛ рд╣рд┐рдВрджреВ рдзрд░реНрдо рд╕реЗ рд╕рдВрдмрдВрдзрд┐рдд рдХреБрдЫ рднреА рдкреВрдЫрдиреЗ рдореЗрдВ рд╕рдВрдХреЛрдЪ рди рдХрд░реЗрдВ, рдореИрдВ рд╕рд╣рд╛рдпрдХ рдорд╛рд░реНрдЧрджрд░реНрд╢рди рдкреНрд░рджрд╛рди рдХрд░рдиреЗ рдХреА рдкреВрд░реА рдХреЛрд╢рд┐рд╢ рдХрд░реВрдВрдЧрд╛! ЁЯХЙя╕П`,

            tamil: `ЁЯЩП ро╡рогроХрпНроХроорпН! роиро╛ройрпН роХрпБро▒ро┐рокрпНрокро╛роХ роЗроирпНродрпБ родро░рпНроороорпН, ро╡рпЗрод рооро░рокрпБроХро│рпН, роЪроЯроЩрпНроХрпБроХро│рпН, роЪроорпНрокро┐ро░родро╛ропроЩрпНроХро│рпН рооро▒рпНро▒рпБроорпН родрпКроЯро░рпНрокрпБроЯрпИроп роЖройрпНроорпАроХ роЮро╛ройроорпН рокро▒рпНро▒ро┐роп роХрпЗро│рпНро╡ро┐роХро│рпБроХрпНроХрпБ роЙродро╡ ро╡роЯро┐ро╡роорпИроХрпНроХрокрпНрокроЯрпНроЯрпБро│рпНро│рпЗройрпН.

роЙроЩрпНроХро│рпН роХрпЗро│рпНро╡ро┐ роЗроирпНрод роОро▓рпНро▓рпИроХрпНроХрпБ ро╡рпЖро│ро┐ропрпЗ роЗро░рпБрокрпНрокродрпБ рокрпЛро▓рпН родрпЖро░ро┐роХро┐ро▒родрпБ. роиро╛ройрпН роЙроЩрпНроХро│рпБроХрпНроХрпБ роЙродро╡ роороХро┐ро┤рпНроЪрпНроЪро┐ропро╛роХ роЗро░рпБрокрпНрокрпЗройрпН:
тАв ро╡рпЗрод роирпВро▓рпНроХро│рпН рооро▒рпНро▒рпБроорпН роЕро╡ро▒рпНро▒ро┐ройрпН рокрпЛродройрпИроХро│рпН
тАв роЗроирпНродрпБ родро┐ро░рпБро╡ро┐ро┤ро╛роЩрпНроХро│рпН рооро▒рпНро▒рпБроорпН роЕро╡ро▒рпНро▒ро┐ройрпН роорпБроХрпНроХро┐ропродрпНродрпБро╡роорпН
тАв роЖройрпНроорпАроХ роироЯрпИроорпБро▒рпИроХро│рпН рооро▒рпНро▒рпБроорпН роЪроЯроЩрпНроХрпБроХро│рпН
тАв роЪроорпНрокро┐ро░родро╛ропроЩрпНроХро│рпН рооро▒рпНро▒рпБроорпН рооро░рокрпБроХро│рпН
тАв родро░рпНроо родродрпНродрпБро╡роорпН рооро▒рпНро▒рпБроорпН роХро░рпБродрпНродрпБроХрпНроХро│рпН
тАв роЪрооро╕рпНроХро┐ро░рпБрод роирпВро▓рпНроХро│рпН рооро▒рпНро▒рпБроорпН роороирпНродро┐ро░роЩрпНроХро│рпН

родропро╡рпБроЪрпЖропрпНродрпБ роЗроирпНродрпБ родро░рпНроороорпН родрпКроЯро░рпНрокро╛рой роОродрпИропрпБроорпН роХрпЗроЯрпНроХ родропроЩрпНроХ ро╡рпЗрогрпНроЯро╛роорпН, роиро╛ройрпН рокропройрпБро│рпНро│ ро╡ро┤ро┐роХро╛роЯрпНроЯрпБродро▓рпИ ро╡ро┤роЩрпНроХ роорпБропро▓рпНро╡рпЗройрпН! ЁЯХЙя╕П`,

            telugu: `ЁЯЩП р░ир░ор░╕р▒Нр░Хр░╛р░░р░В! р░ир▒Зр░ир▒Б р░кр▒Нр░░р░др▒Нр░пр▒Зр░Хр░Вр░Чр░╛ р░╣р░┐р░Вр░жр▒В р░зр░░р▒Нр░ор░В, р░╡р▒Зр░ж р░╕р░Вр░кр▒Нр░░р░жр░╛р░пр░╛р░▓р▒Б, р░Жр░Ър░╛р░░р░╛р░▓р▒Б, р░╕р░Вр░кр▒Нр░░р░жр░╛р░пр░╛р░▓р▒Б р░ор░░р░┐р░пр▒Б р░╕р░Вр░мр░Вр░зр░┐р░д р░Жр░зр▒Нр░пр░╛р░др▒Нр░ор░┐р░Х р░Ьр▒Нр░Юр░╛р░ир░В р░Чр▒Бр░░р░┐р░Вр░Ър░┐р░и р░кр▒Нр░░р░╢р▒Нр░ир░▓р░Хр▒Б р░╕р░╣р░╛р░пр░В р░Ър▒Зр░пр░бр░╛р░ир░┐р░Хр░┐ р░░р▒Вр░кр▒Кр░Вр░жр░┐р░Вр░Ър░мр░бр▒Нр░бр░╛р░ир▒Б.

р░ор▒А р░кр▒Нр░░р░╢р▒Нр░и р░И р░кр░░р░┐р░зр░┐р░Хр░┐ р░╡р▒Жр░▓р▒Бр░кр░▓ р░Йр░ир▒Нр░ир░Яр▒Нр░▓р▒Б р░Хр░ир░┐р░кр░┐р░╕р▒Нр░др▒Лр░Вр░жр░┐. р░ир▒Зр░ир▒Б р░ор▒Ар░Хр▒Б р░╕р░╣р░╛р░пр░В р░Ър▒Зр░пр░бр░Вр░▓р▒Л р░╕р░Вр░др▒Лр░╖р░┐р░╕р▒Нр░др░╛р░ир▒Б:
тАв р░╡р▒Зр░ж р░Чр▒Нр░░р░Вр░ер░╛р░▓р▒Б р░ор░░р░┐р░пр▒Б р░╡р░╛р░Яр░┐ р░мр▒Лр░зр░ир░▓р▒Б
тАв р░╣р░┐р░Вр░жр▒В р░кр░Вр░бр▒Бр░Чр░▓р▒Б р░ор░░р░┐р░пр▒Б р░╡р░╛р░Яр░┐ р░кр▒Нр░░р░╛р░ор▒Бр░Цр▒Нр░пр░д
тАв р░Жр░зр▒Нр░пр░╛р░др▒Нр░ор░┐р░Х р░Ер░нр▒Нр░пр░╛р░╕р░╛р░▓р▒Б р░ор░░р░┐р░пр▒Б р░Жр░Ър░╛р░░р░╛р░▓р▒Б
тАв р░╕р░Вр░кр▒Нр░░р░жр░╛р░пр░╛р░▓р▒Б р░ор░░р░┐р░пр▒Б р░╕р░Вр░кр▒Нр░░р░жр░╛р░пр░╛р░▓р▒Б
тАв р░зр░░р▒Нр░о р░др░др▒Нр░╡р░╢р░╛р░╕р▒Нр░др▒Нр░░р░В р░ор░░р░┐р░пр▒Б р░нр░╛р░╡р░ир░▓р▒Б
тАв р░╕р░Вр░╕р▒Нр░Хр▒Гр░д р░Чр▒Нр░░р░Вр░ер░╛р░▓р▒Б р░ор░░р░┐р░пр▒Б р░ор░Вр░др▒Нр░░р░╛р░▓р▒Б

р░жр░пр░Ър▒Зр░╕р░┐ р░╣р░┐р░Вр░жр▒В р░зр░░р▒Нр░ор░╛р░ир░┐р░Хр░┐ р░╕р░Вр░мр░Вр░зр░┐р░Вр░Ър░┐р░и р░Пр░жр▒Ир░ир░╛ р░Ер░бр░Чр░бр░╛р░ир░┐р░Хр░┐ р░╕р░Вр░Хр▒Лр░Ър░┐р░Вр░Ър░Хр░Вр░бр░┐, р░ир▒Зр░ир▒Б р░╕р░╣р░╛р░пр░Хр░░р░ор▒Ир░и р░ор░╛р░░р▒Нр░Чр░жр░░р▒Нр░╢р░Хр░др▒Нр░╡р░В р░Ер░Вр░жр░┐р░Вр░Ър░бр░╛р░ир░┐р░Хр░┐ р░ир░╛ р░╡р░Вр░др▒Б р░Хр▒Гр░╖р░┐ р░Ър▒Зр░╕р▒Нр░др░╛р░ир▒Б! ЁЯХЙя╕П`,

            kannada: `ЁЯЩП р▓ир▓ор▓╕р│Нр▓Хр▓╛р▓░! р▓ир▓╛р▓ир│Б р▓╡р▓┐р▓╢р│Зр▓╖р▓╡р▓╛р▓Чр▓┐ р▓╣р▓┐р▓Вр▓жр│В р▓зр▓░р│Нр▓о, р▓╡р│Ир▓жр▓┐р▓Х р▓╕р▓Вр▓кр│Нр▓░р▓жр▓╛р▓пр▓Чр▓│р│Б, р▓Жр▓Ър▓╛р▓░р▓Чр▓│р│Б, р▓╕р▓Вр▓кр│Нр▓░р▓жр▓╛р▓пр▓Чр▓│р│Б р▓ор▓др│Нр▓др│Б р▓╕р▓Вр▓мр▓Вр▓зр▓┐р▓д р▓Жр▓зр│Нр▓пр▓╛р▓др│Нр▓ор▓┐р▓Х р▓Ьр│Нр▓Юр▓╛р▓ир▓ж р▓мр▓Чр│Нр▓Чр│Ж р▓кр│Нр▓░р▓╢р│Нр▓ир│Жр▓Чр▓│р▓┐р▓Чр│Ж р▓╕р▓╣р▓╛р▓п р▓ор▓╛р▓бр▓▓р│Б р▓╡р▓┐р▓ир│Нр▓пр▓╛р▓╕р▓Чр│Кр▓│р▓┐р▓╕р▓▓р▓╛р▓Чр▓┐р▓жр│Ж.

р▓ир▓┐р▓ор│Нр▓о р▓кр│Нр▓░р▓╢р│Нр▓ир│Ж р▓И р▓╡р│Нр▓пр▓╛р▓кр│Нр▓др▓┐р▓п р▓╣р│Кр▓░р▓Чр▓┐р▓жр│Ж р▓Ор▓Вр▓жр│Б р▓др│Лр▓░р│Бр▓др│Нр▓др▓жр│Ж. р▓ир▓╛р▓ир│Б р▓ир▓┐р▓ор▓Чр│Ж р▓╕р▓╣р▓╛р▓п р▓ор▓╛р▓бр▓▓р│Б р▓╕р▓Вр▓др│Лр▓╖р▓кр▓бр│Бр▓др│Нр▓др│Зр▓ир│Ж:
тАв р▓╡р│Ир▓жр▓┐р▓Х р▓Чр│Нр▓░р▓Вр▓ер▓Чр▓│р│Б р▓ор▓др│Нр▓др│Б р▓Ер▓╡р│Бр▓Чр▓│ р▓мр│Лр▓зр▓ир│Жр▓Чр▓│р│Б
тАв р▓╣р▓┐р▓Вр▓жр│В р▓╣р▓мр│Нр▓мр▓Чр▓│р│Б р▓ор▓др│Нр▓др│Б р▓Ер▓╡р│Бр▓Чр▓│ р▓ор▓╣р▓др│Нр▓╡
тАв р▓Жр▓зр│Нр▓пр▓╛р▓др│Нр▓ор▓┐р▓Х р▓Ер▓нр│Нр▓пр▓╛р▓╕р▓Чр▓│р│Б р▓ор▓др│Нр▓др│Б р▓Жр▓Ър▓╛р▓░р▓Чр▓│р│Б
тАв р▓╕р▓Вр▓кр│Нр▓░р▓жр▓╛р▓пр▓Чр▓│р│Б р▓ор▓др│Нр▓др│Б р▓╕р▓Вр▓кр│Нр▓░р▓жр▓╛р▓пр▓Чр▓│р│Б
тАв р▓зр▓░р│Нр▓о р▓др▓др│Нр▓╡р▓╢р▓╛р▓╕р│Нр▓др│Нр▓░ р▓ор▓др│Нр▓др│Б р▓кр▓░р▓┐р▓Хр▓▓р│Нр▓кр▓ир│Жр▓Чр▓│р│Б
тАв р▓╕р▓Вр▓╕р│Нр▓Хр│Гр▓д р▓Чр│Нр▓░р▓Вр▓ер▓Чр▓│р│Б р▓ор▓др│Нр▓др│Б р▓ор▓Вр▓др│Нр▓░р▓Чр▓│р│Б

р▓жр▓пр▓╡р▓┐р▓Яр│Нр▓Яр│Б р▓╣р▓┐р▓Вр▓жр│В р▓зр▓░р│Нр▓ор▓Хр│Нр▓Хр│Ж р▓╕р▓Вр▓мр▓Вр▓зр▓┐р▓╕р▓┐р▓ж р▓пр▓╛р▓╡р│Бр▓жр▓ир│Нр▓ир▓╛р▓жр▓░р│В р▓Хр│Зр▓│р▓▓р│Б р▓ор│Бр▓Ьр│Бр▓Чр▓░р▓кр▓бр▓мр│Зр▓бр▓┐, р▓ир▓╛р▓ир│Б р▓╕р▓╣р▓╛р▓пр▓Х р▓ор▓╛р▓░р│Нр▓Чр▓жр▓░р│Нр▓╢р▓и р▓ир│Ар▓бр▓▓р│Б р▓кр│Нр▓░р▓пр▓др│Нр▓ир▓┐р▓╕р│Бр▓др│Нр▓др│Зр▓ир│Ж! ЁЯХЙя╕П`,

            malayalam: `ЁЯЩП р┤ир┤ор┤╕р╡Нр┤Хр┤╛р┤░р┤В! р┤Юр┤╛р╡╗ р┤кр╡Нр┤░р┤др╡Нр┤пр╡Зр┤Хр┤ор┤╛р┤пр┤┐ р┤╣р┤┐р┤ир╡Нр┤жр╡Б р┤зр╡╝р┤ор╡Нр┤ор┤В, р┤╡р╡Ир┤жр┤┐р┤Х р┤кр┤╛р┤░р┤ор╡Нр┤кр┤░р╡Нр┤пр┤Щр╡Нр┤Щр╡╛, р┤Жр┤Ър┤╛р┤░р┤Щр╡Нр┤Щр╡╛, р┤╕р┤ор╡Нр┤кр╡Нр┤░р┤жр┤╛р┤пр┤Щр╡Нр┤Щр╡╛, р┤Ер┤ир╡Бр┤мр┤ир╡Нр┤з р┤Жр┤др╡Нр┤ор╡Ар┤п р┤Ьр╡Нр┤Юр┤╛р┤ир┤В р┤Ор┤ир╡Нр┤ир┤┐р┤╡р┤пр╡Жр┤Хр╡Нр┤Хр╡Бр┤▒р┤┐р┤Ър╡Нр┤Ър╡Бр┤│р╡Нр┤│ р┤Ър╡Лр┤жр╡Нр┤пр┤Щр╡Нр┤Щр╡╛р┤Хр╡Нр┤Хр╡Н р┤╕р┤╣р┤╛р┤пр┤┐р┤Хр╡Нр┤Хр┤╛р╡╗ р┤░р╡Вр┤кр┤Хр╡╜р┤кр╡Нр┤кр┤и р┤Ър╡Жр┤пр╡Нр┤др┤┐р┤Яр╡Нр┤Яр╡Бр┤│р╡Нр┤│р┤др┤╛р┤гр╡Н.

р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤Ър╡Лр┤жр╡Нр┤пр┤В р┤И р┤кр┤░р┤┐р┤зр┤┐р┤Хр╡Нр┤Хр╡Н р┤кр╡Бр┤▒р┤др╡Нр┤др╡Бр┤│р╡Нр┤│р┤др┤╛р┤пр┤┐ р┤др╡Лр┤ир╡Нр┤ир╡Бр┤ир╡Нр┤ир╡Б. р┤Юр┤╛р╡╗ р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Ж р┤╕р┤╣р┤╛р┤пр┤┐р┤Хр╡Нр┤Хр┤╛р╡╗ р┤╕р┤ир╡Нр┤др╡Лр┤╖р┤┐р┤Хр╡Нр┤Хр╡Бр┤ир╡Нр┤ир╡Б:
тАв р┤╡р╡Ир┤жр┤┐р┤Х р┤Чр╡Нр┤░р┤ир╡Нр┤ер┤Щр╡Нр┤Щр┤│р╡Бр┤В р┤Ер┤╡р┤пр╡Бр┤Яр╡Ж р┤кр┤ар┤┐р┤кр╡Нр┤кр┤┐р┤Хр╡Нр┤Хр┤▓р╡Бр┤Хр┤│р╡Бр┤В
тАв р┤╣р┤┐р┤ир╡Нр┤жр╡Б р┤Йр┤др╡Нр┤╕р┤╡р┤Щр╡Нр┤Щр┤│р╡Бр┤В р┤Ер┤╡р┤пр╡Бр┤Яр╡Ж р┤кр╡Нр┤░р┤╛р┤зр┤╛р┤ир╡Нр┤пр┤╡р╡Бр┤В
тАв р┤Жр┤др╡Нр┤ор╡Ар┤п р┤Ер┤нр╡Нр┤пр┤╛р┤╕р┤Щр╡Нр┤Щр┤│р╡Бр┤В р┤Жр┤Ър┤╛р┤░р┤Щр╡Нр┤Щр┤│р╡Бр┤В
тАв р┤╕р┤ор╡Нр┤кр╡Нр┤░р┤жр┤╛р┤пр┤Щр╡Нр┤Щр┤│р╡Бр┤В р┤кр┤╛р┤░р┤ор╡Нр┤кр┤░р╡Нр┤пр┤Щр╡Нр┤Щр┤│р╡Бр┤В
тАв р┤зр╡╝р┤ор╡Нр┤о р┤жр╡╝р┤╢р┤ир┤╡р╡Бр┤В р┤Жр┤╢р┤пр┤Щр╡Нр┤Щр┤│р╡Бр┤В
тАв р┤╕р┤Вр┤╕р╡Нр┤Хр╡Гр┤д р┤Чр╡Нр┤░р┤ир╡Нр┤ер┤Щр╡Нр┤Щр┤│р╡Бр┤В р┤ор┤ир╡Нр┤др╡Нр┤░р┤Щр╡Нр┤Щр┤│р╡Бр┤В

р┤жр┤пр┤╡р┤╛р┤пр┤┐ р┤╣р┤┐р┤ир╡Нр┤жр╡Б р┤зр╡╝р┤ор╡Нр┤ор┤╡р╡Бр┤ор┤╛р┤пр┤┐ р┤мр┤ир╡Нр┤зр┤кр╡Нр┤кр╡Жр┤Яр╡Нр┤Я р┤Ор┤ир╡Нр┤др╡Бр┤В р┤Ър╡Лр┤жр┤┐р┤Хр╡Нр┤Хр┤╛р╡╗ р┤ор┤Яр┤┐р┤Хр╡Нр┤Хр┤░р╡Бр┤др╡Н, р┤Юр┤╛р╡╗ р┤╕р┤╣р┤╛р┤пр┤Хр┤░р┤ор┤╛р┤п р┤ор┤╛р╡╝р┤Чр╡Нр┤Чр┤ир┤┐р╡╝р┤жр╡Нр┤жр╡Зр┤╢р┤В р┤ир╡╜р┤Хр┤╛р╡╗ р┤╢р╡Нр┤░р┤ор┤┐р┤Хр╡Нр┤Хр╡Бр┤В! ЁЯХЙя╕П`,

            bengali: `ЁЯЩП ржиржорж╕рзНржХрж╛рж░! ржЖржорж┐ ржмрж┐рж╢рзЗрж╖ржнрж╛ржмрзЗ рж╣рж┐ржирзНржжрзБ ржзрж░рзНржо, ржмрзИржжрж┐ржХ ржРрждрж┐рж╣рзНржп, ржЖржЪрж╛рж░-ржЕржирзБрж╖рзНржарж╛ржи, рж╕ржорзНржкрзНрж░ржжрж╛ржпрж╝ ржПржмржВ рж╕ржВрж╢рзНрж▓рж┐рж╖рзНржЯ ржЖржзрзНржпрж╛рждрзНржорж┐ржХ ржЬрзНржЮрж╛ржи рж╕ржорзНржкрж░рзНржХрзЗ ржкрзНрж░рж╢рзНржиржЧрзБрж▓рж┐рждрзЗ рж╕рж╣рж╛ржпрж╝рждрж╛ ржХрж░рж╛рж░ ржЬржирзНржп ржбрж┐ржЬрж╛ржЗржи ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред

ржЖржкржирж╛рж░ ржкрзНрж░рж╢рзНржиржЯрж┐ ржПржЗ рж╕рзАржорж╛рж░ ржмрж╛ржЗрж░рзЗ ржмрж▓рзЗ ржоржирзЗ рж╣ржЪрзНржЫрзЗред ржЖржорж┐ ржЖржкржирж╛ржХрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржЦрзБрж╢рж┐ рж╣ржм:
тАв ржмрзИржжрж┐ржХ рж╢рж╛рж╕рзНрждрзНрж░ ржПржмржВ рждрж╛ржжрзЗрж░ рж╢рж┐ржХрзНрж╖рж╛
тАв рж╣рж┐ржирзНржжрзБ ржЙрзОрж╕ржм ржПржмржВ рждрж╛ржжрзЗрж░ рждрж╛рзОржкрж░рзНржп
тАв ржЖржзрзНржпрж╛рждрзНржорж┐ржХ ржЕржирзБрж╢рзАрж▓ржи ржПржмржВ ржЖржЪрж╛рж░
тАв рж╕ржорзНржкрзНрж░ржжрж╛ржпрж╝ ржПржмржВ ржРрждрж┐рж╣рзНржп
тАв ржзрж░рзНржорзАржпрж╝ ржжрж░рзНрж╢ржи ржПржмржВ ржзрж╛рж░ржгрж╛
тАв рж╕ржВрж╕рзНржХрзГржд ржЧрзНрж░ржирзНрже ржПржмржВ ржоржирзНрждрзНрж░

ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ рж╣рж┐ржирзНржжрзБ ржзрж░рзНржорзЗрж░ рж╕рж╛ржерзЗ рж╕ржорзНржкрж░рзНржХрж┐ржд ржпрзЗржХрзЛржирзЛ ржХрж┐ржЫрзБ ржЬрж┐ржЬрзНржЮрж╛рж╕рж╛ ржХрж░рждрзЗ ржжрзНржмрж┐ржзрж╛ ржХрж░ржмрзЗржи ржирж╛, ржЖржорж┐ рж╕рж╣рж╛ржпрж╝ржХ ржирж┐рж░рзНржжрзЗрж╢ржирж╛ ржкрзНрж░ржжрж╛ржирзЗрж░ ржЬржирзНржп ржЖржорж╛рж░ рж╕рзЗрж░рж╛ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░ржм! ЁЯХЙя╕П`,

            gujarati: `ЁЯЩП ркиркорк╕рлНркдрлЗ! рк╣рлБркВ ркЦрк╛рк╕ ркХрк░рлАркирлЗ рк╣рк┐ркирлНркжрлБ ркзрк░рлНрко, рк╡рлИркжрк┐ркХ рккрк░ркВрккрк░рк╛ркУ, ркзрк╛рк░рлНркорк┐ркХ рк╡рк┐ркзрк┐ркУ, рк╕ркВрккрлНрк░ркжрк╛ркпрлЛ ркЕркирлЗ рк╕ркВркмркВркзрк┐ркд ркЖркзрлНркпрк╛ркдрлНркорк┐ркХ ркЬрлНркЮрк╛рки рк╡рк┐рк╢рлЗркирк╛ рккрлНрк░рк╢рлНркирлЛркорк╛ркВ ркоркжркж ркХрк░рк╡рк╛ ркорк╛ркЯрлЗ ркмркирк╛рк╡рк╛ркпрлЗрк▓ ркЫрлБркВ.

ркдркорк╛рк░рлЛ рккрлНрк░рк╢рлНрки ркЖ ркХрлНрк╖рлЗркдрлНрк░ркирлА ркмрк╣рк╛рк░ рк▓рк╛ркЧрлЗ ркЫрлЗ. рк╣рлБркВ ркдркорк╛рк░рлА ркоркжркж ркХрк░рк╡рк╛ркорк╛ркВ ркЦрлБрк╢ ркеркИрк╢:
тАв рк╡рлИркжрк┐ркХ рк╢рк╛рк╕рлНркдрлНрк░рлЛ ркЕркирлЗ ркдрлЗркоркирк╛ рк╢рк┐ркХрлНрк╖ркгрлЛ
тАв рк╣рк┐ркирлНркжрлБ ркдрк╣рлЗрк╡рк╛рк░рлЛ ркЕркирлЗ ркдрлЗркоркирлБркВ ркорк╣ркдрлНрк╡
тАв ркЖркзрлНркпрк╛ркдрлНркорк┐ркХ рккрлНрк░ркерк╛ркУ ркЕркирлЗ рк╡рк┐ркзрк┐ркУ
тАв рк╕ркВрккрлНрк░ркжрк╛ркпрлЛ ркЕркирлЗ рккрк░ркВрккрк░рк╛ркУ
тАв ркзрк░рлНрко ркжрк░рлНрк╢рки ркЕркирлЗ ркЦрлНркпрк╛рк▓рлЛ
тАв рк╕ркВрк╕рлНркХрлГркд ркЧрлНрк░ркВркерлЛ ркЕркирлЗ ркоркВркдрлНрк░рлЛ

ркХрлГрккрк╛ ркХрк░рлАркирлЗ рк╣рк┐ркирлНркжрлБ ркзрк░рлНрко рк╕ркВркмркВркзрк┐ркд ркХркВркИрккркг рккрлВркЫрк╡рк╛ркорк╛ркВ рк╕ркВркХрлЛркЪ рки ркХрк░рлЛ, рк╣рлБркВ ркоркжркжрк░рлВркк ркорк╛рк░рлНркЧркжрк░рлНрк╢рки ркЖрккрк╡рк╛ркирлЛ рк╢рлНрк░рлЗрк╖рлНрка рккрлНрк░ркпрк╛рк╕ ркХрк░рлАрк╢! ЁЯХЙя╕П`,

            marathi: `ЁЯЩП рдирдорд╕реНрдХрд╛рд░! рдореА рд╡рд┐рд╢реЗрд╖рддрдГ рд╣рд┐рдВрджреВ рдзрд░реНрдо, рд╡реИрджрд┐рдХ рдкрд░рдВрдкрд░рд╛, рд╡рд┐рдзреА, рд╕рдВрдкреНрд░рджрд╛рдп рдЖрдгрд┐ рд╕рдВрдмрдВрдзрд┐рдд рдЖрдзреНрдпрд╛рддреНрдорд┐рдХ рдЬреНрдЮрд╛рди рдпрд╛рд╡рд┐рд╖рдпреАрдЪреНрдпрд╛ рдкреНрд░рд╢реНрдирд╛рдВрдордзреНрдпреЗ рдорджрдд рдХрд░рдгреНрдпрд╛рд╕рд╛рдареА рддрдпрд╛рд░ рдХреЗрд▓реЗ рдЖрд╣реЗ.

рддреБрдордЪрд╛ рдкреНрд░рд╢реНрди рдпрд╛ рд╡реНрдпрд╛рдкреНрддреАрдЪреНрдпрд╛ рдмрд╛рд╣реЗрд░ рд╡рд╛рдЯрддреЛ. рдореА рддреБрдореНрд╣рд╛рд▓рд╛ рдорджрдд рдХрд░рдгреНрдпрд╛рд╕ рдЖрдирдВрджрд┐рдд рдЖрд╣реЗ:
тАв рд╡реИрджрд┐рдХ рд╢рд╛рд╕реНрддреНрд░реЗ рдЖрдгрд┐ рддреНрдпрд╛рдВрдЪреА рд╢рд┐рдХрд╡рдг
тАв рд╣рд┐рдВрджреВ рд╕рдг рдЖрдгрд┐ рддреНрдпрд╛рдВрдЪреЗ рдорд╣рддреНрддреНрд╡
тАв рдЖрдзреНрдпрд╛рддреНрдорд┐рдХ рдкреНрд░рдерд╛ рдЖрдгрд┐ рд╡рд┐рдзреА
тАв рд╕рдВрдкреНрд░рджрд╛рдп рдЖрдгрд┐ рдкрд░рдВрдкрд░рд╛
тАв рдзрд░реНрдо рддрддреНрддреНрд╡рдЬреНрдЮрд╛рди рдЖрдгрд┐ рд╕рдВрдХрд▓реНрдкрдирд╛
тАв рд╕рдВрд╕реНрдХреГрдд рдЧреНрд░рдВрде рдЖрдгрд┐ рдордВрддреНрд░

рдХреГрдкрдпрд╛ рд╣рд┐рдВрджреВ рдзрд░реНрдорд╛рд╢реА рд╕рдВрдмрдВрдзрд┐рдд рдХрд╛рд╣реАрд╣реА рд╡рд┐рдЪрд╛рд░рдгреНрдпрд╛рд╕ рд╕рдВрдХреЛрдЪ рдХрд░реВ рдирдХрд╛, рдореА рд╕рд╣рд╛рдпреНрдпрдХ рдорд╛рд░реНрдЧрджрд░реНрд╢рди рджреЗрдгреНрдпрд╛рдЪрд╛ рд╕рд░реНрд╡реЛрддреНрддрдо рдкреНрд░рдпрддреНрди рдХрд░реЗрди! ЁЯХЙя╕П`,

            punjabi: `ЁЯЩП ри╕рид ри╕рйНри░рйА риЕриХри╛ри▓! риорйИриВ риЦри╛ри╕ ридрйМри░ 'ридрйЗ ри╣ри┐рй░рижрйВ ризри░рио, ри╡рйИрижри┐риХ рикри░рй░рикри░ри╛ри╡ри╛риВ, ри░рйАридрйА-ри░ри┐ри╡ри╛риЬри╛риВ, ри╕рй░рикрйНри░рижри╛риЗриЖриВ риЕридрйЗ ри╕рй░римрй░ризри┐рид риЖризри┐риЖридриори┐риХ риЧри┐риЖрии римри╛ри░рйЗ ри╕ри╡ри╛ри▓ри╛риВ ри╡ри┐рй▒риЪ риорижриж риХри░рии ри▓риИ ридри┐риЖри░ риХрйАридри╛ риЧри┐риЖ ри╣ри╛риВред

ридрйБри╣ри╛рибри╛ ри╕ри╡ри╛ри▓ риЗри╕ рижри╛риЗри░рйЗ ридрйЛриВ римри╛ри╣ри░ ри▓риЧрижри╛ ри╣рйИред риорйИриВ ридрйБри╣ри╛рибрйА риорижриж риХри░рии ри╡ри┐рй▒риЪ риЦрйБри╕ри╝ ри╣рйЛри╡ри╛риВриЧри╛:
тАв ри╡рйИрижри┐риХ ри╕ри╝ри╛ри╕ридри░ риЕридрйЗ риЙриирйНри╣ри╛риВ рижрйАриЖриВ ри╕ри┐рй▒риЦри┐риЖри╡ри╛риВ
тАв ри╣ри┐рй░рижрйВ ридри┐риЙри╣ри╛ри░ риЕридрйЗ риЙриирйНри╣ри╛риВ рижри╛ риори╣рй▒ридри╡
тАв риЖризри┐риЖридриори┐риХ риЕринри┐риЖри╕ риЕридрйЗ ри░рйАридрйА-ри░ри┐ри╡ри╛риЬ
тАв ри╕рй░рикрйНри░рижри╛риЗриЖриВ риЕридрйЗ рикри░рй░рикри░ри╛ри╡ри╛риВ
тАв ризри░рио рижри░ри╕ри╝рии риЕридрйЗ ри╕рй░риХри▓рикриири╛ри╡ри╛риВ
тАв ри╕рй░ри╕риХрйНри░ри┐рид риЧрйНри░рй░рие риЕридрйЗ риорй░ридри░

риХри┐ри░рикри╛ риХри░риХрйЗ ри╣ри┐рй░рижрйВ ризри░рио риири╛ри▓ ри╕рй░римрй░ризри┐рид риХрйЛриИ ри╡рйА риЧрй▒ри▓ рикрйБрй▒риЫриг ридрйЛриВ риЭри┐риЬриХрйЛ риири╛, риорйИриВ риорижрижриЧри╛ри░ риори╛ри░риЧрижри░ри╕ри╝рии рижрйЗриг рижрйА рикрйВри░рйА риХрйЛри╕ри╝ри┐ри╕ри╝ риХри░ри╛риВриЧри╛! ЁЯХЙя╕П`
          };
          
          return responses[lang as keyof typeof responses] || responses.english;
        };

        const assistantMessage: Message = {
          id: (Date.now() + 1).toString(),
          content: getOffTopicResponse(language),
          role: 'assistant',
          timestamp: new Date(),
        };

        setMessages(prev => [...prev, assistantMessage]);
        setIsLoading(false);
        return;
      }

      let assistantContent: string;

      if (engine === 'indic') {
        // Use Indic NLP engine
        assistantContent = await indicNLP.generateResponse(currentInput, {
          language,
          context: messages.slice(-2).map(m => `${m.role}: ${m.content}`).join('\n')
        });
      } else {
        // Use Azure OpenAI
        const { data, error } = await supabase.functions.invoke('azure-chat', {
          body: {
            messages: [{ role: 'user', content: currentInput }],
            language
          }
        });

        if (error) throw error;
        assistantContent = data.message;
      }

      const assistantMessage: Message = {
        id: (Date.now() + 1).toString(),
        content: assistantContent,
        role: 'assistant',
        timestamp: new Date(),
      };

      setMessages(prev => [...prev, assistantMessage]);
    } catch (error) {
      console.error('Error sending message:', error);
      toast({
        title: "Error",
        description: `Failed to send message using ${engine === 'indic' ? 'Indic NLP' : 'Azure OpenAI'}. Please try again.`,
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  };

  const handleFormSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    sendMessage();
  };

  return (
    <Card className={`w-full ${isMobile ? 'h-[calc(100vh-8rem)]' : 'h-[600px]'} flex flex-col`}>
      <CardHeader className={`flex flex-col ${isMobile ? 'space-y-2 pb-2' : 'space-y-4 pb-4'}`}>
        <div className={`flex ${isMobile ? 'flex-col space-y-2' : 'flex-row'} items-center ${isMobile ? '' : 'justify-between'}`}>
          <CardTitle className={`${isMobile ? 'text-lg text-center' : 'text-2xl'} font-bold bg-gradient-to-r from-orange-600 to-orange-800 bg-clip-text text-transparent`}>
            Hindu Dharma AI Assistant
          </CardTitle>
          <div className="flex items-center gap-2">
            {engine === 'azure' ? <Cloud className="w-5 h-5 text-blue-500" /> : <Cpu className="w-5 h-5 text-green-500" />}
            <span className="text-sm text-muted-foreground">
              {engine === 'azure' ? 'Azure OpenAI' : 'Indic NLP'}
            </span>
          </div>
        </div>
        
        {isMobile && (
          <>
            <div className="flex flex-row items-center justify-center">
              <EngineSelector value={engine} onValueChange={handleEngineChange} />
            </div>
            <DocumentUpload onDocumentsProcessed={handleDocumentsProcessed} />
          </>
        )}
        
        {isInitializingIndic && (
          <div className="text-sm text-muted-foreground flex items-center gap-2 p-3 bg-orange-50 rounded-lg border border-orange-200">
            <div className="w-4 h-4 border-2 border-orange-200 border-t-orange-600 rounded-full animate-spin"></div>
            <div className="flex flex-col">
              <span className="font-medium">Initializing Advanced Indic NLP Engine...</span>
              <span className="text-xs text-orange-600">This may take 20-30 seconds to load the multilingual BERT model</span>
            </div>
          </div>
        )}
        {engine === 'indic' && !isInitializingIndic && documentsProcessedCount && documentsProcessedCount > 0 && (
          <div className="text-sm text-green-600 flex items-center gap-2 p-2 bg-green-50 rounded-lg border border-green-200">
            ЁЯУЪ Knowledge enhanced with uploaded documents
          </div>
        )}
      </CardHeader>
      <CardContent className={`flex-1 flex flex-col ${isMobile ? 'space-y-2' : 'space-y-4'}`}>
        <ScrollArea className={`flex-1 ${isMobile ? 'pr-2' : 'pr-4'} w-full overflow-hidden`} ref={scrollAreaRef}>
          <div className="space-y-4 w-full max-w-full">
            {messages.length === 0 && (
              <div className={`text-center ${isMobile ? 'py-4 px-2' : 'py-8'} text-muted-foreground w-full`}>
                <Bot className={`${isMobile ? 'w-8 h-8' : 'w-12 h-12'} mx-auto ${isMobile ? 'mb-2' : 'mb-4'} text-orange-500`} />
                <p className={`${isMobile ? 'text-base' : 'text-lg'} break-words`}>Welcome to the Hindu Dharma AI Assistant</p>
                <p className={`${isMobile ? 'text-sm px-2' : ''} break-words max-w-full`}>Ask questions about Vedic traditions, rituals, sampradayas, and more.</p>
              </div>
            )}
            
            {messages.map((message) => (
              <div
                key={message.id}
                className={`flex items-start space-x-3 ${
                  message.role === 'user' ? 'justify-end' : 'justify-start'
                }`}
              >
                {message.role === 'assistant' && (
                  <div className="w-8 h-8 rounded-full bg-orange-100 flex items-center justify-center">
                    <Bot className="w-5 h-5 text-orange-600" />
                  </div>
                )}
                
                <div
                  className={`${isMobile ? 'max-w-[85%]' : 'max-w-[70%]'} rounded-lg ${isMobile ? 'px-3 py-2' : 'px-4 py-2'} ${
                    message.role === 'user'
                      ? 'bg-orange-600 text-white'
                      : 'bg-muted text-foreground'
                  }`}
                >
                  <p className="whitespace-pre-wrap">{message.content}</p>
                  <p className={`text-xs mt-1 opacity-70`}>
                    {message.timestamp.toLocaleTimeString()}
                  </p>
                </div>
                
                {message.role === 'user' && (
                  <div className="w-8 h-8 rounded-full bg-orange-600 flex items-center justify-center">
                    <User className="w-5 h-5 text-white" />
                  </div>
                )}
              </div>
            ))}
            
            {isLoading && (
              <div className="flex items-start space-x-3">
                <div className="w-8 h-8 rounded-full bg-orange-100 flex items-center justify-center">
                  <Bot className="w-5 h-5 text-orange-600" />
                </div>
                <div className="bg-muted rounded-lg px-4 py-2">
                  <div className="flex space-x-1">
                    <div className="w-2 h-2 bg-current rounded-full animate-bounce"></div>
                    <div className="w-2 h-2 bg-current rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                    <div className="w-2 h-2 bg-current rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                  </div>
                </div>
              </div>
            )}
          </div>
        </ScrollArea>
        
        {/* Speech Preview */}
        {showSpeechPreview && (
          <div className="p-4 bg-blue-50 rounded-lg border border-blue-200">
            <h4 className="text-sm font-medium text-blue-700 mb-2">Speech to Text Result:</h4>
            <p className="text-gray-700 mb-3 p-2 bg-white rounded border">{speechText}</p>
            <div className="flex gap-2">
              <Button 
                type="button" 
                onClick={submitSpeechText}
                className="bg-green-600 hover:bg-green-700 text-white"
              >
                тЬЕ Submit This Question
              </Button>
              <Button 
                type="button" 
                variant="outline" 
                onClick={cancelSpeechInput}
              >
                тЭМ Cancel
              </Button>
            </div>
          </div>
        )}
        
        <form onSubmit={handleFormSubmit} className={`flex ${isMobile ? 'flex-col space-y-3' : 'items-center space-x-2'}`}>
          <div className={`${isMobile ? 'w-full' : ''}`}>
            <LanguageSelector value={language} onValueChange={setLanguage} />
          </div>
          {isMobile ? (
            <>
              <div className="flex space-x-2">
                <Input
                  value={input}
                  onChange={(e) => setInput(e.target.value)}
                  onKeyDown={handleKeyPress}
                  placeholder="Ask about Hindu Dharma..."
                  disabled={isLoading}
                  className="flex-1"
                  autoComplete="off"
                  autoCapitalize="sentences"
                  autoCorrect="on"
                  enterKeyHint="send"
                  inputMode="text"
                />
                <Button
                  type="button"
                  onClick={isListening ? stopListening : startListening}
                  disabled={isLoading || showSpeechPreview}
                  className={`h-12 px-3 ${isListening ? 'bg-red-600 hover:bg-red-700' : 'bg-blue-600 hover:bg-blue-700'}`}
                >
                  {isListening ? <MicOff className="w-5 h-5" /> : <Mic className="w-5 h-5" />}
                </Button>
              </div>
              <Button 
                type="submit"
                disabled={isLoading || !input.trim()}
                className="w-full h-12 touch-manipulation active:scale-95"
                style={{ 
                  WebkitTapHighlightColor: 'transparent',
                  touchAction: 'manipulation'
                }}
                onTouchStart={() => {}}
              >
                <Send className="w-5 h-5 mr-2" />
                Send Message
              </Button>
            </>
          ) : (
            <div className="flex flex-1 space-x-2">
              <Input
                value={input}
                onChange={(e) => setInput(e.target.value)}
                onKeyDown={handleKeyPress}
                placeholder="Ask about Hindu Dharma, rituals, sampradayas..."
                disabled={isLoading}
                className="flex-1"
                autoComplete="off"
                autoCapitalize="sentences"
                autoCorrect="on"
                enterKeyHint="send"
                inputMode="text"
              />
              <Button
                type="button"
                onClick={isListening ? stopListening : startListening}
                disabled={isLoading || showSpeechPreview}
                className={`px-3 ${isListening ? 'bg-red-600 hover:bg-red-700' : 'bg-blue-600 hover:bg-blue-700'}`}
              >
                {isListening ? <MicOff className="w-4 h-4" /> : <Mic className="w-4 h-4" />}
              </Button>
              <Button 
                type="submit"
                disabled={isLoading || !input.trim()}
                style={{ 
                  WebkitTapHighlightColor: 'transparent',
                  touchAction: 'manipulation'
                }}
                onTouchStart={() => {}}
              >
                <Send className="w-4 h-4" />
              </Button>
            </div>
          )}
        </form>
      </CardContent>
    </Card>
  );
};